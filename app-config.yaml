app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

  support:
    url: https://github.com/devxp-tech/backstage/issues # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Issues
        icon: github
        links:
          - url: https://github.com/backstage/backstage/issues
            title: GitHub Issues
      - title: Slack Chatroom
        icon: chat
        links:
          - url: https://devxp-tech.slack.com/archives/C03L5M16CS2
            title: '#backstage'

organization:
  name: Kubeshot Consulting

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'data:', 'https://avatars.githubusercontent.com']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir


integrations:
  github:
    - host: github.com
      token: #
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# kubernetes:
#   serviceLocatorMethod:
#     type: multiTenant
#   clusterLocatorMethods:
#     - type: config
#       clusters:
#         - url: ${K8S_URL}
#           name: development
#           authProvider: serviceAccount
#           skipTLSVerify: true
#           skipMetricsLookup: true
#           serviceAccountToken: ${K8S_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local or docker'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# techdocs:
#   publisher:
#     type: 'awsS3'
#     awsS3:
#       bucketName: 'name-of-techdocs-storage-bucket'
#       region: ${AWS_REGION}
#       credentials:
#         accessKeyId: ${AWS_ACCESS_KEY_ID}
#         secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

proxy:
  '/argocd/api':
    target: http://argocd-server.argocd.svc/api/v1/
    changeOrigin: true
    # only if your argocd api has self-signed cert
    secure: true
    headers:
      Cookie:
        $env: ARGOCD_AUTH_TOKEN

  '/grafana/api':
    # May be an internal DNS
    target: http://grafana.monitoring.svc/
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}

  '/prometheus/api':
    # url to the api and path of your hosted prometheus instance
    target: http://prometheus-server.monitoring.svc/api/v1/

  '/snyk':
    target: https://snyk.io/api/v1
    headers:
      User-Agent: tech-services/backstage-plugin/1.0
      Authorization:
        $env: SNYK_TOKEN

# sonarqube:
#   baseUrl: https://sonar.diegoluisi.eti.br
#   apiKey: '${SONARQUBE_TOKEN}'

grafana:
  # Publicly accessible domain
  domain: https://grafana.diegoluisi.eti.br

# auth:
#   # see https://backstage.io/docs/auth/ to learn about auth providers
#   providers: {}

auth:
  environment: development
  ### Providing an auth.session.secret will enable session support in the auth-backend
  # session:
  #   secret: custom session secret
  providers:
    github:
      development:
        clientId: #
        clientSecret: #
        # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: ':robot: [backstage-bot]'
    email: backstage@devxp-tech.io
  # defaultCommitMessage: "ðŸ¤– U can't touch this" # Defaults to 'Initial commit'

# Force Deploy

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        - API
        - Component
        - Domain
        - Group
        - System
        - User
        - Template
        - Resource
        - Location

  locations:
    # Backstage example components
    - type: url
      #target: https://github.com/jbbkj-dev/backstage-catalog/blob/main/devxp/all.yaml
      #target: https://github.com/devxp-tech/backstage-catalog/blob/main/devxp/all.yaml
      target: https://github.com/jbbkj-dev/backstage-catalog/blob/main/devxp/all.yaml


